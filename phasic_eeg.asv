%% 
%% EEG pipeline to extract trial-level phasic posterior alpha power 
%% Shawn T. Schwartz <stschwartz@stanford.edu> 2023
%% 
%% Adapted from Madore et al. (2020, Nature)
%%

function phasic_eeg(step)

%% SETUP (customize relevant paths/details here)
basedir = '/Users/shawn/Developer/repos/eeg-pipeline/';
scriptdir = basedir;
experiment_name = 'spindrift';
datadir = ['../../../Dropbox/Research/Stanford/wagner-lab/data_archive/', experiment_name, '/memory/include/'];
subjidsfname = 'subject_ids_to_preproc_ALL.txt';
band = 'alpha';
% band = 'theta';
FILTER_TYPE = 'alpha_prestimret';
% FILTER_TYPE = 'theta_prestimret';
% FILTER_TYPE = 'ERP';
EVENT_TAG = {'encm'};
TONIC_EPOCH_TIMEBIN = [0 2.5];
ERP_EPOCH_TIMEBIN = [-0.2 1];
ERP_BASELINE_TIMEBIN = [-200 0];
TRIALS_PER_RUN = 156;

%% load environment
addpath(genpath(scriptdir));
addpath(datadir);
group = importdata([datadir, subjidsfname]); % one subject name per line

if nargin < 1
    step = 'preproc';
end

%% Naming key:
% bandpass filter -> f
% reject bad channels -> b
% manually prune -> p
% average rereference -> r
% center -> c
% epoch -> e
% concatenated runs -> cat

%% begin iterating over EEG data for each subject
for subj = 1:length(group)
    %% load eeg datasets

    if ~strcmp(step, 'manrej')
        [ALLEEG, EEG, CURRENTSET, ALLCOM] = eeglab;
    end

    suffix = ['_', experiment_name, '_'];

    subid = sprintf('%s', group{subj});
    fprintf(['\n\n',subid,'\n\n']);

    filepath = [datadir, subid, '/eeg/enc/raw/'];

    if subj > 1
        cd(basedir);
    end

    cd(filepath);

    runs = [0];
    
    % change this to reflect specific runs that can't run the ICA (i.e., only 1 channel) 
    % -- otherwise, EyeCatch will throw an error and the preprocessing won't continue
%     icatypes_per_run = {'runica'};
%     icatypes_per_run = {''};

    n_runs = size(runs, 2);

    %% EEG PREPROCESSING STEP
    if strcmp(step, 'preproc')
        %% eeg preprocessing

        reject_indices = {};
        all_reject = [];

        for i = 1:n_runs
            %% Setup
            r = runs(i);
            curr_suffix = suffix;
    
            %% Load .raw EGI file
            run_file = [pwd, '/', subid, '_study', num2str(r), '.raw'];
            disp(run_file);
            % EEG = pop_readegi(run_file, [], [], 'auto');
            EEG = pop_readegi(run_file, [], [], ['../../../../../../../../../../../../..', basedir, 'montage/GSN-HydroCel-128.sfp']);
    
            %% Load channel locations
            EEG = pop_chanedit(EEG, 'load', {[basedir, 'montage/GSN-HydroCel-128.sfp'] 'filetype' 'autodetect'});
    
            %% Remove useless channels (cheeks, eyes)
            channels_to_toss = [127, 126, 17, 25, 21, 22, 15, 14, 9, 8, ...
                1, 32, 125, 128, 119, 120, 113, 114, 121, 49, 48, 43, 44, 38]; 
            
            EEG = pop_select(EEG, 'nochannel', channels_to_toss);
            suffix = [suffix, 'b'];

            %% Decimate from 1000Hz to 100Hz
            EEG = pop_resample(EEG, 100);

            %% Bandpass filter
            fprintf(['\nFiltering subject ', subid, ', run ', num2str(r), '\n']);

            %% Hamming windowed sinc FIR filter
            EEG = pop_eegfiltnew(EEG, .1); % high pass filter
            EEG = pop_eegfiltnew(EEG, [], 30); % low pass filter

            %% Run BLINKER to insert blink events
            fprintf('Detecting blinks with BLINKER... ');

            fieldList = {'maxFrame', 'leftZero', 'rightZero', 'leftBase', 'rightBase', ...
                'leftZeroHalfHeight', 'rightZeroHalfHeight'};

            try
                [EEG, com, blinks, blinkFits, blinkProperties, blinkStatistics, params] = pop_blinker(EEG, struct());
            catch ME
                warning('NO BLINKS DETECTED WITH BLINKER... bypassing BLINKER but continuing to EyeCatch!')
                blinks = [];
                blinkFits = [];
                blinkProperties = [];
                blinkStatistics = ['bypass'];
                blinkInfo = struct();
                blinkInfo.blinks = blinks;
                blinkInfo.blinkFits = blinkFits;
                blinkInfo.blinkProperties = blinkProperties;
                blinkInfo.blinkStatistics = blinkStatistics;
                blinkInfo.blinkSignal = [];
                blinkInfo.custom = [];
                blinkInfo.custom.blinkChannel = '';
            end

            if ~isempty(blinkStatistics)
                if ~ischar(blinkStatistics) %~contains(blinkStatistics, 'bypass')
                    % save blinkinfo data
                    blinkInfo = struct();
                    blinkInfo.blinks = blinks;
                    blinkInfo.blinkFits = blinkFits;
                    blinkInfo.blinkProperties = blinkProperties;
                    blinkInfo.blinkStatistics = blinkStatistics;
                    blinkInfo.blinkSignal = [];
                    blinkInfo.custom = [];
                    blinkInfo.custom.blinkChannel = '';
                
                    if isnan(blinks.usedSignal)
                        warning('%s: does not have a blink signal', num2str(r))
                    else
                        blinkInfo.custom.blinkChannel = EEG.chanlocs(abs(blinks.usedSignal)).labels;
                        if ~isempty(fieldList)
                            [EEG, blinkSignal] = addBlinkEvents(EEG, blinks, blinkFits, blinkProperties, fieldList);
                            blinkInfo.blinkSignal = blinkSignal;
                        end
                    end
                
                    fname = sprintf('study%s_blinkInfo.mat', num2str(r));
                    save(fname, 'blinkInfo');
                end
            
                %% Remove eye artifact and blink activity from time-domain (uses EyeCatch)
                fprintf('Removing artifacts using EyeCatch...');
                icatype = icatypes_per_run{i};
                % icatype = 'runica';
                % icatype = ''; % extract blinks without running EyeCatch ICA when number of channels (i.e., 1) is too small
                regressBlinkEvents = false;
                regressBlinkSignal = false;
                [EEG, removalInfo] = removeEyeArtifactsLARG(EEG, blinkInfo, ...
                                        icatype, regressBlinkEvents, regressBlinkSignal);
                EEG.icaact = [];
                save(sprintf('study%s_removalInfo.mat', num2str(r)), 'removalInfo');
            end
    
            suffix = [suffix, 'f'];
    
            %% Save data
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                [subid, '_study', num2str(r), suffix], 'savenew', [subid, '_study', num2str(r), ...
                suffix, '.set'], 'overwrite', 'on', 'gui', 'off');
    
            %% Find bad channels to remove
            [~, indelec] = pop_rejchanspec(EEG, 'stdthresh', [-3, 3]);
            reject_indices{r+1, 1} = indelec;
            all_reject = [all_reject, reject_indices{r+1, 1}];
    
            %% Reset
            suffix = curr_suffix;
        end
    
        suffix = [suffix, 'bf'];
    
        %% Remove bad channels from all runs
        for i = 1:n_runs
            %% Setup
            r = num2str(runs(i));
            curr_suffix = suffix;
            file = [subid, '_study', r, suffix, '.set'];
    
            %% Load in dataset
            EEG = pop_loadset('filename', file);
            EEG = pop_select(EEG, 'nochannel', all_reject);

            if subid == 'm026'
                EEG = pop_select(EEG, 'nochannel', {'E76', 'E77'}); % just for subject m026
            end

            suffix = [suffix, 'b'];
    
            %% Save out indices -- reject all for each run (union)
            save('rejected_channels', 'reject_indices');
    
            %% Save out data
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                [subid, '_study', num2str(r), suffix], 'savenew', [subid, '_study', r, ...
                suffix, '.set'], 'overwrite', 'on', 'gui', 'off');
    
            %% Reset
            suffix = curr_suffix;
        end
    
        %% Setup for post pre-processing
        suffix = [suffix, 'bfb'];
        suffix = ['_', experiment_name, '_bfb'];
    
        %% Epoch dataset
        for i = 1:n_runs
            %% Setup
            r = num2str(runs(i));
            file = [subid, '_study', r, suffix];
    
            %% Load in dataset
            EEG = pop_loadset([file, '.set']);
            [ALLEEG] = eeg_store(ALLEEG, EEG, i);
        end
    
        EEG = pop_mergeset(ALLEEG, 1:n_runs, 0);
        EEG = pop_epoch(EEG, EVENT_TAG, TONIC_EPOCH_TIMEBIN, 'newname', 'epochs', 'epochinfo', 'yes');
        pop_saveset(EEG, 'filename', 'merged_raw_epochs');
    end


    %% EEG MANUAL ARTIFACT REJECTION STEP
    %% Steps for manual rejection of epochs
    % The pop_eegplot() function doesn't return anything or store the
    % changes to the current EEG set when run from the script, so it isn't
    % useful from an automated standpoint. Nonetheless, here's how to run
    % this portion:
    %
    % Step 1) Run the first part of this script like normal for all
    % subject ids: tonic_eeg('preproc')
    %
    % Step 2) Once all subjects have been run and preprocessed, then it's
    % time for (this) non-automated portion :(
    %   2.1) Change current directory to each subject's directory (you can
    %   use the "Current Folder" / file chooser above (or do this
    %   programmatically)
    %   2.2) Copy and paste everything within the block below (NOT
    %   INCLUDING THE "if strcmp(step, 'manrej')" / "end" lines) into the
    %   Command Window below
    %   2.3) Manually select the bad epochs with extreme values and change 
    %   window scale to '79':
    %   "As with continuous data, it is possible to use EEGLAB to reject
    %   epoched data simply by visual inspection. To do so, press the
    %   Scroll data button on the top of the interactive window. A
    %   scrolling window will pop up. Change the scale to ‘79’. Epochs are
    %   shown delimited by blue dashed lines and can be selected/deselected
    %   for rejection simply by clicking on them. Rejecting parts of an
    %   epoch is not possible." (from:
    %   https://eeglab.org/tutorials/misc/Rejecting_Artifacts_Legacy_Menus.html#:~:text=Rejecting%20epochs%20by%20visual%20inspection,the%20scale%20to%20'79'.)
    %   2.4) Click "UPDATE MARKS", and then the necessary CSV file with
    %   rejected epoch indices will be saved
    %   2.5) Now, after doing this for all subjects (ensuring that there's
    %   a "prestimret_rejected_epochs.csv" file in every subject folder
    %   unique to each subjects' rejected epochs, then run
    %   "tonic_eeg('filter')" which will take those rejected epochs
    %   into account when pulling out alpha bands/ERPs. **If no
    %   "prestimret_rejected_epochs.csv" file exists, then I made it assume
    %   that all epochs are good and it won't crash but instead run
    %   everything as if no epochs were rejected (i.e., like a csv file
    %   full of 0s for all epoch rejected indices)** This filter stage will
    %   subsequently output a file with the exact trial numbers
    %   corresponding to each column in the alpha band/ERP files to be
    %   appended for post hoc analyses of the processed EEG data
    %
    % -- Shawn, 06/07/2022
    if strcmp(step, 'manrej')
        clear;
        clc;

        SUBJ_TO_INSPECT = 'm034';
        warning(SUBJ_TO_INSPECT);

        cd(['/Users/shawn/Dropbox/Research/Stanford/wagner-lab/data_archive/spindrift/memory/include/', SUBJ_TO_INSPECT, '/eeg/enc/raw']);

        EPOCH_TYPE = 'alpha_prestimret';
%         EPOCH_TYPE = 'theta_prestimret';

        [ALLEEG, EEG, CURRENTSET, ALLCOM] = eeglab;
        file_to_load = 'merged_raw_epochs.set';
        EEG = pop_loadset(file_to_load);

        if strcmp(EPOCH_TYPE, 'alpha_prestimret')
            MAN_REJ_FNAME = strcat(SUBJ_TO_INSPECT, '_', EPOCH_TYPE, '_rejected_epochs.csv');
            alpha_channels = [62, 67, 71, 72, 75, 76, 77];
            for i = 1:128
                if ~any(alpha_channels(:) == i)
                    non_alpha_channels_to_toss{i} = strcat('E', num2str(i));
                end
            end
            non_alpha_channels_to_toss = non_alpha_channels_to_toss(~cellfun('isempty', non_alpha_channels_to_toss));
            EEG = pop_select(EEG, 'nochannel', non_alpha_channels_to_toss);
        end

        if strcmp(EPOCH_TYPE, 'theta_prestimret')
            MAN_REJ_FNAME = strcat(SUBJ_TO_INSPECT, '_', EPOCH_TYPE, '_rejected_epochs.csv');
            theta_channels = [5, 6, 7, 11, 12, 13, 106, 112]; % midfrontal theta
            for i = 1:128
                if ~any(theta_channels(:) == i)
                    non_theta_channels_to_toss{i} = strcat('E', num2str(i));
                end
            end
            non_theta_channels_to_toss = non_theta_channels_to_toss(~cellfun('isempty', non_theta_channels_to_toss));
            EEG = pop_select(EEG, 'nochannel', non_theta_channels_to_toss);
        end
        
        % pop_eegthresh(EEG, 1) % set lower/upper threshold to +/- 200 mV
        % (Stimulus-Induced Changes in 1/f-like Background Activity in EEG;
        % https://doi.org/10.1523/JNEUROSCI.0414-22.2022)
        % set lower/upper threshold to +/- 100 mV (https://www.jneurosci.org/content/42/38/7285)
        pop_eegthresh(EEG, 1) % set lower/upper threshold to +/- 150 mV

%         pop_eegplot(EEG, 1, 1, 0);
        uiwait();
        rejected_trials = EEG.reject.rejmanual;
        rejected_trials = rejected_trials';

        csvwrite(MAN_REJ_FNAME, rejected_trials);
    end

    %% MANUAL INTERVENTION TO INJECT PSUEDOEVENTS INTO EVENT FREE EPOCHS
    % I'm doing this to prevent the EEGLAB bug where the event/urevent
    % aspect of the EEG struct is removed when epoched data don't have any
    % event tags within; this is creating downstream issues with merging
    % the epochs in pop_mergeset (where there is a dot indexing error
    % because it can't find the event/urevent struct).
    %
    % This step is similar to the manual rejection step above (where it
    % should be copy-pasted into the console instead of run as an automated
    % step... since it will rely upon the GUI.
    %
    % Find the first instance of the 'retm' event tag, then add a
    % psuedoevent tag called 'aaaa' within a 1-s latency **BEFORE** the 
    % 'retm' tag. Then, save out the data set and use this in the downstream
    % filtering steps.
    %
    % NOTE: This step is an attempt to work around this bug -- this step is
    % being run on a certain subset of participants where I noticed this
    % issue *AFTER* attempting to run the 'filter' step below, so now I'm
    % going back to adjust the .set files to the filter step can run all
    % the way through without this error. To know which runs were affected,
    % I loaded the dataset for each affected participant up through the
    % `pop_mergeset()` part of the alpha band filter step and then looked
    % at the struct to see which had empty event arrays.
    %
    % -- Shawn, 09/01/2022
    if strcmp(step, 'maninject')
        clear;
        clc;

        % CHANGE THIS HERE FOR EACH SUBJECT THAT NEEDS TO BE FIXED:
        SUBJ_TO_INSPECT = 'm032';
        RUNS_TO_INJECT = [2];

        %% SETUP (copied from the init part of the script)
        basedir = '/Users/shawn/Developer/repos/eeg-pipeline/';
        scriptdir = basedir;
        experiment_name = 'spindrift';
        datadir = ['../../../Dropbox/Research/Stanford/wagner-lab/data_archive/', experiment_name, '/memory/include/'];
        subjidsfname = 'subject_ids_to_preproc_ALL.txt';
        band = 'alpha';
        FILTER_TYPE = 'alpha_prestimret';
        % FILTER_TYPE = 'ERP';
        EVENT_TAG = {'encm'};
        TONIC_EPOCH_TIMEBIN = [0 2.5];
        ERP_EPOCH_TIMEBIN = [-0.2 1];
        ERP_BASELINE_TIMEBIN = [-200 0];
        TRIALS_PER_RUN = 156;
        runs = [0];
        n_runs = size(runs, 2);

        subid = SUBJ_TO_INSPECT;

        warning(subid);

        cd(['/Users/shawn/Dropbox/Research/Stanford/wagner-lab/data_archive/spindrift/memory/include/', subid, '/eeg/enc/raw']);

        [ALLEEG, EEG, CURRENTSET, ALLCOM] = eeglab;
        
        %% Setup
        suffix = ['_', experiment_name, '_bfb'];
        total_trials = [1:(length(runs)*TRIALS_PER_RUN)];

        %% EPOCH REMOVAL LOADING STEP
        % bring in rejected_epochs.csv file
        REJ_EPOCH_FILENAME = strcat(subid, '_', FILTER_TYPE, '_rejected_epochs.csv');
        if exist(REJ_EPOCH_FILENAME, 'file')
            bad_prestim_epochs = csvread(REJ_EPOCH_FILENAME);
        else
            bad_prestim_epochs = zeros(length(runs)*TRIALS_PER_RUN, 1);
        end

        keep_these_trials = [];
        for ii = 1:length(total_trials)
            if bad_prestim_epochs(ii) == 0
                keep_these_trials = [keep_these_trials, total_trials(ii)];
            end
        end

        csvwrite([subid, '_', FILTER_TYPE, '_trials.csv'], keep_these_trials');

        %% FILTER STEP
        for i = 1:n_runs
            %% Setup
            r = num2str(runs(i));
            currsuffix = suffix;

            %% Average Rereference by run
            % Load manually inspected set
            file = [subid, '_study', r, suffix, '.set'];
            EEG = pop_loadset('filename', file);
            EEG = pop_reref(EEG, []);

            % if this is one of the impacted runs, then load up the GUI to
            % inject the pseudoevent tag
            if contains(num2str(RUNS_TO_INJECT), r)
                EEG = pop_editeventvals(EEG)
            end

            %% Save
            suffix = [suffix, 'r'];
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                [subid, '_study', r, '_rereferenced'], 'savenew', [subid, '_study', r, suffix, '.set'], ...
                'overwrite', 'on', 'gui', 'off');

            %% Reset
            suffix = currsuffix;
        end

        suffix = [suffix, 'r'];
    
        PAF = 10;

        %% Compute instantaneous power
        for i = 1:n_runs
            %% Setup
            r = num2str(runs(i));

            %% Load dataset
            EEG = pop_loadset('filename', [subid, '_study', r, suffix, '.set']);

            %% Compute
            EEG_power = comp_power_PAF(EEG, band, PAF);

            %% Epoch prestimulus
            EEG = EEG_power;

            %% Center by run
            run_chan_means = mean(EEG.data, 2);
            save([subid, '_study', r, '_', band, '_chan_means'], 'run_chan_means');

            %% Epoch: 1s prestim
            EEG = pop_epoch(EEG, EVENT_TAG, TONIC_EPOCH_TIMEBIN, 'newname', ...
                [subid, '_study', num2str(r), '_prestim_e'], 'epochinfo', 'yes');

            %% Save out epoched data
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                                [subid, '_study', num2str(r), '_', FILTER_TYPE], 'savenew', ...
                                [subid, '_study', r, suffix, 'e_', FILTER_TYPE, '.set'], ...
                                'overwrite', 'on', 'gui', 'off');
        end

        %% Concatenate prestim runs
        for i = 1:n_runs
            %% Setup
            r = runs(i);

            %% Load the epoched sets
            EEG = pop_loadset('filename', ...
                [pwd, '/', subid, '_study', num2str(r), suffix, 'e_', FILTER_TYPE, '.set']);
    
            [ALLEEG] = eeg_store(ALLEEG, EEG, i);
        end

        %% Merge sets
        EEG = pop_mergeset(ALLEEG, 1:n_runs, 0);

        %% Remove bad epochs
        bad_epochs = bad_prestim_epochs;
        EEG = pop_rejepoch(EEG, bad_epochs, 0);

        %% Save
        [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                            'Merged datasets', 'savenew', ...
                            [subid, suffix, 'e_', FILTER_TYPE, '_cat.set'], ...
                            'overwrite', 'on', 'gui', 'off');

        %% Save prestim data
        EEG = pop_loadset('filename', [subid, suffix, 'e_', FILTER_TYPE, '_cat.set']);

        %% Get metadata
        [n_channels, n_timepoints, n_trials] = size(EEG.data);

        %% Save raw prestim data (channel X time X trials)
        raw_prestim_file = [pwd, '/', subid, suffix, 'e_', FILTER_TYPE, '.csv'];

        %% Directory cleanup (if necessary)
        if exist(raw_prestim_file, 'file') == 2
            unix('mkdir -p trash');
            unix(['mv ', raw_prestim_file, ' trash']);
        end

        %% Append channel data to raw power output CSVs
        for c = 1:n_channels
            channel_data = reshape(EEG.data(c,:,:), n_timepoints, n_trials);
            
            % Add column with channel number
            label_c = EEG.chanlocs(c).labels;
            label_c = str2num(label_c(2:end));
            channel_data = [channel_data, repmat(label_c, n_timepoints, 1)];
                                
            dlmwrite(raw_prestim_file, channel_data, '-append');
        end

        %% Pre-Stim ERPs (Parietal Old/New and FN400)
        for i = 1:n_runs
            %% Setup
            r = num2str(runs(i));
    
            %% Load dataset
            EEG = pop_loadset('filename', [subid, '_study', r, suffix, '.set']);

            %% Get Relevant Epochs
            EEG = pop_epoch(EEG, EVENT_TAG, ERP_EPOCH_TIMEBIN, 'newname', ...
                [subid, '_study', num2str(r), '_erp_prestimret'], 'epochinfo', 'yes');

            %% Perform baseline correction
%             EEG = pop_rmbase(EEG, ERP_BASELINE_TIMEBIN);

            [ALLEEG] = eeg_store(ALLEEG, EEG, i);
        end

        suffix = [suffix, 'e'];

        %% Merge sets
        EEG = pop_mergeset(ALLEEG, 1:n_runs, 0);

        %% Remove bad epochs
        if ~isempty(bad_prestim_epochs)
            EEG = pop_rejepoch(EEG, bad_prestim_epochs, 0);
        end

        %% Save EEGLAB set
        [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                            'Merged datasets', 'savenew', ...
                            [subid, suffix, '_erp_prestimret_cat.set'], ...
                            'overwrite', 'on', 'gui', 'off');

        %% Save raw
        [n_channels, n_timepoints, n_trials] = size(EEG.data);
    
        erp_prestim_file = [pwd, '/', subid, suffix, '_erp_prestimret.csv'];
    
        if exist(erp_prestim_file, 'file') == 2
            unix('mkdir -p trash');
            unix(['mv ', erp_prestim_file, ' trash']);
        end

        for c = 1:n_channels
            channel_data = reshape(EEG.data(c, :, :), n_timepoints, n_trials);
            
            % Add column with channel number
            label_c = EEG.chanlocs(c).labels;
            label_c = str2num(label_c(2:end));
            channel_data = [channel_data, repmat(label_c, n_timepoints, 1)];
                                
            dlmwrite(erp_prestim_file, channel_data, '-append');
        end
    end


    %% EEG BAND FILTERING STEP
    if strcmp(step, 'filter')
        %% Setup
        suffix = ['_', experiment_name, '_bfb'];
        total_trials = [1:(length(runs)*TRIALS_PER_RUN)];

        %% EPOCH REMOVAL LOADING STEP
        % bring in rejected_epochs.csv file
        REJ_EPOCH_FILENAME = strcat(subid, '_', FILTER_TYPE, '_rejected_epochs.csv');
        if exist(REJ_EPOCH_FILENAME, 'file')
            bad_prestim_epochs = csvread(REJ_EPOCH_FILENAME);
        else
            bad_prestim_epochs = zeros(length(runs)*TRIALS_PER_RUN, 1);
        end

        keep_these_trials = [];
        for ii = 1:length(total_trials)
            if bad_prestim_epochs(ii) == 0
                keep_these_trials = [keep_these_trials, total_trials(ii)];
            end
        end

        csvwrite([subid, '_', FILTER_TYPE, '_trials.csv'], keep_these_trials');

        if strcmp(FILTER_TYPE, 'alpha_prestimret') | strcmp(FILTER_TYPE, 'theta_prestimret')
            %% FILTER STEP
            for i = 1:n_runs
                %% Setup
                r = num2str(runs(i));
                currsuffix = suffix;
    
                %% Average Rereference by run
                % Load manually inspected set
                file = [subid, '_study', r, suffix, '.set'];
                EEG = pop_loadset('filename', file);
                EEG = pop_reref(EEG, []);
    
                %% Save
                suffix = [suffix, 'r'];
                [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                    [subid, '_study', r, '_rereferenced'], 'savenew', [subid, '_study', r, suffix, '.set'], ...
                    'overwrite', 'on', 'gui', 'off');
    
                %% Reset
                suffix = currsuffix;
            end
    
            suffix = [suffix, 'r'];
    
            PAF = 10;
    
            %% Compute instantaneous power
            for i = 1:n_runs
                %% Setup
                r = num2str(runs(i));
    
                %% Load dataset
                EEG = pop_loadset('filename', [subid, '_study', r, suffix, '.set']);
    
                %% Compute
                EEG_power = comp_power_PAF(EEG, band, PAF);
    
                %% Epoch prestimulus
                EEG = EEG_power;
    
                %% Center by run
                run_chan_means = mean(EEG.data, 2);
                save([subid, '_study', r, '_', band, '_chan_means'], 'run_chan_means');
    
                %% Epoch: 1s prestim
                EEG = pop_epoch(EEG, EVENT_TAG, TONIC_EPOCH_TIMEBIN, 'newname', ...
                    [subid, '_study', num2str(r), '_prestim_e'], 'epochinfo', 'yes');
    
                %% Save out epoched data
                [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                                    [subid, '_study', num2str(r), '_', FILTER_TYPE], 'savenew', ...
                                    [subid, '_study', r, suffix, 'e_', FILTER_TYPE, '.set'], ...
                                    'overwrite', 'on', 'gui', 'off');
            end
    
            %% Concatenate prestim runs
            for i = 1:n_runs
                %% Setup
                r = runs(i);
    
                %% Load the epoched sets
                EEG = pop_loadset('filename', ...
                    [pwd, '/', subid, '_study', num2str(r), suffix, 'e_', FILTER_TYPE, '.set']);
        
                [ALLEEG] = eeg_store(ALLEEG, EEG, i);
            end
    
            %% Merge sets
            EEG = pop_mergeset(ALLEEG, 1:n_runs, 0);
    
            %% Remove bad epochs
            bad_epochs = bad_prestim_epochs;
            EEG = pop_rejepoch(EEG, bad_epochs, 0);
    
            %% Save
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                                'Merged datasets', 'savenew', ...
                                [subid, suffix, 'e_', FILTER_TYPE, '_cat.set'], ...
                                'overwrite', 'on', 'gui', 'off');
    
            %% Save prestim data
            EEG = pop_loadset('filename', [subid, suffix, 'e_', FILTER_TYPE, '_cat.set']);
    
            %% Get metadata
            [n_channels, n_timepoints, n_trials] = size(EEG.data);
    
            %% Save raw prestim data (channel X time X trials)
            raw_prestim_file = [pwd, '/', subid, suffix, 'e_', FILTER_TYPE, '.csv'];
    
            %% Directory cleanup (if necessary)
            if exist(raw_prestim_file, 'file') == 2
                unix('mkdir -p trash');
                unix(['mv ', raw_prestim_file, ' trash']);
            end
    
            %% Append channel data to raw power output CSVs
            for c = 1:n_channels
                channel_data = reshape(EEG.data(c,:,:), n_timepoints, n_trials);
                
                % Add column with channel number
                label_c = EEG.chanlocs(c).labels;
                label_c = str2num(label_c(2:end));
                channel_data = [channel_data, repmat(label_c, n_timepoints, 1)];
                                    
                dlmwrite(raw_prestim_file, channel_data, '-append');
            end
        end 

        if strcmp(band, 'alpha')
            %% Pre-Stim ERPs (Parietal Old/New and FN400)
            for i = 1:n_runs
                %% Setup
                r = num2str(runs(i));
        
                %% Load dataset
                EEG = pop_loadset('filename', [subid, '_study', r, suffix, '.set']);
    
                %% Get Relevant Epochs
                EEG = pop_epoch(EEG, EVENT_TAG, ERP_EPOCH_TIMEBIN, 'newname', ...
                    [subid, '_study', num2str(r), '_erp_prestimret'], 'epochinfo', 'yes');
    
                %% Perform baseline correction
    %             EEG = pop_rmbase(EEG, ERP_BASELINE_TIMEBIN);
    
                [ALLEEG] = eeg_store(ALLEEG, EEG, i);
            end
    
            suffix = [suffix, 'e'];
    
            %% Merge sets
            EEG = pop_mergeset(ALLEEG, 1:n_runs, 0);
    
            %% Remove bad epochs
            if ~isempty(bad_prestim_epochs)
                EEG = pop_rejepoch(EEG, bad_prestim_epochs, 0);
            end
    
            %% Save EEGLAB set
            [ALLEEG, EEG, CURRENTSET] = pop_newset(ALLEEG, EEG, 1, 'setname', ...
                                'Merged datasets', 'savenew', ...
                                [subid, suffix, '_erp_prestimret_cat.set'], ...
                                'overwrite', 'on', 'gui', 'off');
    
            %% Save raw
            [n_channels, n_timepoints, n_trials] = size(EEG.data);
        
            erp_prestim_file = [pwd, '/', subid, suffix, '_erp_prestimret.csv'];
        
            if exist(erp_prestim_file, 'file') == 2
                unix('mkdir -p trash');
                unix(['mv ', erp_prestim_file, ' trash']);
            end
    
            for c = 1:n_channels
                channel_data = reshape(EEG.data(c, :, :), n_timepoints, n_trials);
                
                % Add column with channel number
                label_c = EEG.chanlocs(c).labels;
                label_c = str2num(label_c(2:end));
                channel_data = [channel_data, repmat(label_c, n_timepoints, 1)];
                                    
                dlmwrite(erp_prestim_file, channel_data, '-append');
            end
        end
    end
end

cd(basedir);

end